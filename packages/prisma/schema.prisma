generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                     @id @default(cuid())
  email                  String                     @unique
  username               String                     @unique
  name                   String?
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  connections            Connection[]
  notes                  Note[]
  noteAccess             NoteAccess[]
  targetedActivityLogs   NoteActivityLog[]          @relation("ActivityLogTarget")
  activityLogs           NoteActivityLog[]
  noteComments           NoteComment[]
  onboardingProgress     OnboardingProgress[]
  onboardingStepProgress OnboardingStepProgress[]
  sentInvitations        OrganizationInvitation[]   @relation("inviter")
  createdOrgNotes        OrganizationNote[]         @relation("createdBy")
  passkey                Passkey[]
  password               Password?
  sessions               Session[]
  image                  UserImage?
  organizations          UserOrganization[]
  utmSource              UtmSource?
  roles                  Role[]                     @relation("RoleToUser")
  orgNoteFavorites       OrganizationNoteFavorite[]
}

model Note {
  id        String         @id @default(cuid())
  title     String
  content   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  ownerId   String
  owner     User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String
  backedUp       Boolean
  transports     String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Organization {
  id                     String                   @id @default(cuid())
  name                   String
  slug                   String                   @unique
  description            String?
  active                 Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  planName               String?
  stripeCustomerId       String?
  stripeProductId        String?
  stripeSubscriptionId   String?
  subscriptionStatus     String?
  size                   String?
  integrations           Integration[]
  onboardingProgress     OnboardingProgress[]
  onboardingStepProgress OnboardingStepProgress[]
  image                  OrganizationImage?
  invitations            OrganizationInvitation[]
  notes                  OrganizationNote[]
  users                  UserOrganization[]
}

model UserOrganization {
  userId         String
  organizationId String
  role           String
  active         Boolean      @default(true)
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  department     String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model OrganizationImage {
  id             String       @id @default(cuid())
  altText        String?
  objectKey      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  email          String
  role           String       @default("member")
  token          String       @unique
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  inviterId      String?
  inviter        User?        @relation("inviter", fields: [inviterId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@index([organizationId])
}

model UtmSource {
  id        String   @id @default(cuid())
  source    String?
  medium    String?
  campaign  String?
  term      String?
  content   String?
  referrer  String?
  createdAt DateTime @default(now())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrganizationNote {
  id                     String                      @id @default(cuid())
  title                  String
  content                String
  isPublic               Boolean                     @default(true)
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  organizationId         String
  createdById            String
  noteAccess             NoteAccess[]
  activityLogs           NoteActivityLog[]
  comments               NoteComment[]
  integrationConnections NoteIntegrationConnection[]
  createdBy              User                        @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade)
  organization           Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  images                 OrganizationNoteImage[]
  favorites              OrganizationNoteFavorite[]

  @@index([organizationId])
  @@index([createdById])
  @@index([organizationId, updatedAt])
}

model OrganizationNoteImage {
  id        String           @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  noteId    String
  note      OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model Integration {
  id             String                      @id @default(cuid())
  organizationId String
  providerName   String
  providerType   String
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  config         String
  isActive       Boolean                     @default(true)
  lastSyncAt     DateTime?
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  organization   Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  logs           IntegrationLog[]
  activityLogs   NoteActivityLog[]
  connections    NoteIntegrationConnection[]

  @@unique([organizationId, providerName])
  @@index([organizationId])
}

model NoteIntegrationConnection {
  id            String           @id @default(cuid())
  noteId        String
  integrationId String
  externalId    String
  config        String
  isActive      Boolean          @default(true)
  lastPostedAt  DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  integration   Integration      @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  note          OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, integrationId, externalId])
  @@index([noteId])
  @@index([integrationId])
}

model IntegrationLog {
  id            String      @id @default(cuid())
  integrationId String
  action        String
  status        String
  requestData   String?
  responseData  String?
  errorMessage  String?
  createdAt     DateTime    @default(now())
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
  @@index([createdAt])
}

model NoteAccess {
  id        String           @id @default(cuid())
  noteId    String
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

model NoteComment {
  id        String             @id @default(cuid())
  content   String
  noteId    String
  userId    String
  parentId  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  parent    NoteComment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   NoteComment[]      @relation("CommentReplies")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      OrganizationNote   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  images    NoteCommentImage[]

  @@index([noteId])
  @@index([userId])
  @@index([parentId])
  @@index([noteId, createdAt])
}

model NoteCommentImage {
  id        String      @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  commentId String
  comment   NoteComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([commentId])
}

model NoteActivityLog {
  id            String           @id @default(cuid())
  noteId        String
  userId        String
  action        String
  metadata      String?
  targetUserId  String?
  integrationId String?
  commentId     String?
  createdAt     DateTime         @default(now())
  integration   Integration?     @relation(fields: [integrationId], references: [id])
  targetUser    User?            @relation("ActivityLogTarget", fields: [targetUserId], references: [id])
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  note          OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([userId])
  @@index([noteId, createdAt])
  @@index([action])
}

model OnboardingStep {
  id           String                   @id @default(cuid())
  key          String                   @unique
  title        String
  description  String
  icon         String?
  actionConfig String?
  isActive     Boolean                  @default(true)
  sortOrder    Int                      @default(0)
  autoDetect   Boolean                  @default(false)
  detectConfig String?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  userProgress OnboardingStepProgress[]

  @@index([isActive, sortOrder])
}

model OnboardingStepProgress {
  id             String         @id @default(cuid())
  userId         String
  organizationId String
  stepId         String
  isCompleted    Boolean        @default(false)
  completedAt    DateTime?
  metadata       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  step           OnboardingStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId, stepId])
  @@index([userId, organizationId])
  @@index([stepId])
}

model OnboardingProgress {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  totalSteps     Int          @default(0)
  completedCount Int          @default(0)
  isCompleted    Boolean      @default(false)
  completedAt    DateTime?
  isVisible      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model OrganizationNoteFavorite {
  id        String           @id @default(cuid())
  userId    String
  noteId    String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@index([userId])
  @@index([noteId])
}
