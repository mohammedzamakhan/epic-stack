// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  passkey     Passkey[]
  organizations UserOrganization[]
  sentInvitations OrganizationInvitation[] @relation("inviter")
  utmSource   UtmSource?
  createdOrgNotes OrganizationNote[] @relation("createdBy")
  noteAccess      NoteAccess[]
  noteComments    NoteComment[]
  activityLogs    NoteActivityLog[]
  targetedActivityLogs NoteActivityLog[] @relation("ActivityLogTarget")
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}

model Organization {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?
  active      Boolean @default(true)

  // Stripe payment fields
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripeProductId      String?
  planName             String?
  subscriptionStatus   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        UserOrganization[]
  invitations  OrganizationInvitation[]
  image        OrganizationImage?
  notes        OrganizationNote[]
  integrations Integration[]
}

model UserOrganization {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  role           String       // e.g., "admin", "member", etc.
  active         Boolean      @default(true)
  isDefault      Boolean      @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model OrganizationImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String       @unique
}

model OrganizationInvitation {
  id        String    @id @default(cuid())
  email     String
  role      String    @default("member")
  token     String    @unique
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  inviter   User?   @relation("inviter", fields: [inviterId], references: [id])
  inviterId String?

  @@unique([email, organizationId])
  @@index([organizationId])
}

model UtmSource {
  id          String  @id @default(cuid())
  source      String?
  medium      String?
  campaign    String?
  term        String?
  content     String?
  referrer    String?
  
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String   @unique
}

model OrganizationNote {
  id      String @id @default(cuid())
  title   String
  content String
  isPublic Boolean @default(true) // Public by default

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdBy   User   @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById String

  images              OrganizationNoteImage[]
  integrationConnections NoteIntegrationConnection[]
  noteAccess          NoteAccess[]
  comments            NoteComment[]
  activityLogs        NoteActivityLog[]

  // non-unique foreign keys
  @@index([organizationId])
  @@index([createdById])
  @@index([organizationId, updatedAt])
}

model OrganizationNoteImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model Integration {
  id             String @id @default(cuid())
  organizationId String
  providerName   String // 'slack', 'teams', 'jira', etc.
  providerType   String // 'productivity', 'ticketing', etc.
  
  // OAuth/API credentials (encrypted)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?
  
  // Provider-specific configuration
  config         String // JSON string for provider-specific data
  
  // Connection metadata
  isActive       Boolean @default(true)
  lastSyncAt     DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  connections    NoteIntegrationConnection[]
  logs           IntegrationLog[]
  activityLogs   NoteActivityLog[]
  
  @@unique([organizationId, providerName])
  @@index([organizationId])
}

model NoteIntegrationConnection {
  id            String @id @default(cuid())
  noteId        String
  integrationId String
  
  // Provider-specific connection data
  externalId    String // e.g., Slack channel ID
  config        String // JSON string: Channel name, webhook URL, etc.
  
  isActive      Boolean @default(true)
  lastPostedAt  DateTime?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  note          OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([noteId, integrationId, externalId])
  @@index([noteId])
  @@index([integrationId])
}

model IntegrationLog {
  id            String @id @default(cuid())
  integrationId String
  action        String // 'post_message', 'sync_channels', etc.
  status        String // 'success', 'error', 'pending'
  
  // Request/response data
  requestData   String? // JSON string
  responseData  String? // JSON string
  errorMessage  String?
  
  createdAt     DateTime @default(now())
  
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@index([integrationId])
  @@index([createdAt])
}

model NoteAccess {
  id     String @id @default(cuid())
  noteId String
  userId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  note OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([noteId, userId])
  @@index([noteId])
  @@index([userId])
}

model NoteComment {
  id      String @id @default(cuid())
  content String // HTML content from TipTap editor
  noteId  String
  userId  String
  parentId String? // For nested replies
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  note     OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   NoteComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  NoteComment[] @relation("CommentReplies")
  images   NoteCommentImage[]
  
  @@index([noteId])
  @@index([userId])
  @@index([parentId])
  @@index([noteId, createdAt])
}

model NoteCommentImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment   NoteComment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String

  // non-unique foreign key
  @@index([commentId])
}

model NoteActivityLog {
  id      String @id @default(cuid())
  noteId  String
  userId  String
  action  String // 'viewed', 'deleted', 'sharing_changed', 'access_granted', 'access_revoked', 'integration_connected', 'integration_disconnected', 'comment_added', 'comment_deleted'
  
  // Additional context data stored as JSON
  metadata String? // JSON string containing action-specific data
  
  // For actions involving other users (e.g., granting access)
  targetUserId String?
  
  // For integration-related actions
  integrationId String?
  
  // For comment-related actions
  commentId String?
  
  createdAt DateTime @default(now())
  
  note         OrganizationNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetUser   User? @relation("ActivityLogTarget", fields: [targetUserId], references: [id], onDelete: SetNull)
  integration  Integration? @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  
  @@index([noteId])
  @@index([userId])
  @@index([noteId, createdAt])
  @@index([action])
}
